options { 
    DEBUG_PARSER=false; 
    STATIC=false; 
} 
 
PARSER_BEGIN(Reader) 
package  pla  ;

import java.io.*;
 

 
public class Reader { 
  /** le support de lecture */
  public static void main(String args []){
   		System.out.println("Entrez votre commande robot :");
 	    // System.out.println(read().readArbre());
  }
  protected static java.io.Reader in = new BufferedReader(new InputStreamReader(System.in)); 
  /** lecture d'une S-EXPR au terminal 
   * @return Sexpr : la Sexpr construite. 
   * @throws LispException une erreur de syntaxe 
   */ 
  public static Noeud read(){
	  	Reader parser = new Reader(in);
	  	Noeud n = null;
	  	try
 	    {
 	      n = parser.BASE();
 	    }
		catch (ParseException e)
		{
		  System.out.println(e.getMessage());
		}
	  	return n;
    }
    
  /** lecture d'une S-EXPR � partir de la cha�ne 
   * @param s : la cha�ne 
   * @return Sexpr : la Sexpr construite. 
   * @throws LispException une  erreur de syntaxe 
   */ 
  public static Noeud read(String s){
    Reader parser = new Reader (in);
	Noeud n2 = null;
	try
	{
	  n2 = parser.EXPR();
    }
    catch(ParseException e)
    {
      System.out.println(e.getMessage());
	}
	return n2;
   }
} 
 
PARSER_END(Reader) 

TOKEN :{ 
  < PARO : "(" >
| < PARF : ")" >
| < ACCO : "{" >
| < ACCF : " }" >
| < ITERE : ":" >
| < REPETE : "*" >
| < PTV : ";" >
| < HASARD  : "|" >
| < OU  : "||" >
| < INF  : "<" >
| < SUP  : " >" >
| <SYMBOL: (["a"-"z"]|["A"-"Z"])+ > 
}

// les r�gles de grammaire de ce langage

Noeud BASE() :
{Noeud n, n1; }
{    < ACCO > n=EXPR() < ACCF >
  (
   < REPETE >{
      n1 = new Noeud();
	  n1.action=Competence.Etoile;
	  n1.filsDroit=n;
	  return n1;}
  | { return n; }
  )
}

Noeud EXPR() :
{Noeud n2, n1; Token t ; Noeud n = new Noeud();}{	  <ACCO> n1=EXPR() <ACCF>
	(	  < OU > <ACCO> n2=EXPR() <ACCF> {
	  n.action = Competence.Ou;
	  n.filsGauche = n1;
	  n.filsDroit = n2;
	  return n;
	  }
	|< SUP > <ACCO> n2=EXPR() <ACCF> {
	  // Noeud n = new Noeud();
	  n.action = Competence.Sup;
	  n.filsGauche= n1;
	  n.filsDroit = n2;
	  return n;
	  }
	)
	| n1=LISTE() {
	  return n1;
	  }
}

Noeud LISTE() :
{Noeud n1; Token t;Noeud n=new Noeud() ;}
{	t = < SYMBOL >
	(	  <PTV> n1=LISTE() {
	  n1.action = Noeud.Symb_to_Comp(t.toString());
	  n.filsDroit = n1;
	  return n;}
	| {
	  n.action = Noeud.Symb_to_Comp(t.toString());
	  return n;
	  }
	)
	
}
